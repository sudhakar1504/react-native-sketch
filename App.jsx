import {
  Button,
  Image,
  LogBox,
  SafeAreaView,
  StyleSheet,
  Text,
  View,
} from 'react-native';
import React, {useEffect, useState} from 'react';
import {SketchCanvas} from 'rn-perfect-sketch-canvas';
// import Svg from 'react-native-svg';
import {
  Circle,
  Defs,
  G,
  Image as Svimg,
  Mask,
  Path,
  Rect,
  Svg,
} from 'react-native-svg';
import {useCanvasRef} from '@shopify/react-native-skia';
import {captureRef} from 'react-native-view-shot';
import refimg from './scr/asset/hello.png';
import TextRecognition, {
  TextRecognitionScript,
} from '@react-native-ml-kit/text-recognition';
import Letter from './Letter';
import pointInPolygon from 'point-in-polygon';

const App = () => {
  const canvasRef = useCanvasRef();
  const svgRef = React.useRef(null);
  const [Imagurl, setImagurl] = useState(null);
  const [Base64, setBase64] = useState(null);
  const [OutputText, setOutputText] = useState(null);
  const CaptureHandler = async () => {
    try {
      const result = await canvasRef.current.toBase64();
      let base64 = `data:image/png;base64,${result}`;
      setBase64(base64);
      setTimeout(async () => {
        const uri = await captureRef(svgRef, {
          format: 'png',
          quality: 1,
        });
        setImagurl(uri);
      }, 1000);
    } catch (err) {
      console.log('====================================');
      console.log(err);
      console.log('====================================');
    }
  };
  const CheckHandler = async () => {
    const result = await TextRecognition.recognize(Imagurl);
    // const result = await TextRecognition.recognize(refimg);
    console.log('====================================');
    console.log(result);
    setOutputText(result?.text);
    console.log('====================================');
  };
  const ResetHandler = () => {
    canvasRef.current.reset();
  };
  const UndoHandler = () => {
    // canvasRef.current.undo()
    console.log('====================================');
    console.log(canvasRef.current.toPoints());
    console.log('====================================');
  };
  const RedoHandler = () => {
    // canvasRef.current.redo()
    canvasRef.current?.addPoints([
      [
        [1, 1],
        [1, 2],
        [2, 2],
        [2, 1],
      ],
    ]);
  };
  const ValidateHandler = () => {
    let testPolygon = [[95.22321428571429, 23.611607142857142], [95.22321428571429, 24.75], [94.08063616071429, 25.888392857142858], [94.08063616071429, 27.026785714285715], [94.08063616071429, 28.1875], [92.93805803571429, 31.033482142857142], [92.93805803571429, 32.494698660714285], [91.64612397693452, 34.05351329985119], [91.79547991071429, 36.600992838541664], [90.65290178571429, 36.17857142857143], [90.65290178571429, 37.69642857142857], [90.65290178571429, 38.83482142857143], [90.65290178571429, 39.995535714285715], [89.51032366071429, 41.13392857142857], [89.51032366071429, 42.27232142857143], [88.36774553571429, 43.410714285714285], [88.36774553571429, 44.549107142857146], [88.36774553571429, 45.70982142857143], [87.22516741071429, 46.848214285714285], [87.22516741071429, 47.986607142857146], [87.22516741071429, 49.125], [86.08258928571429, 49.125], [86.08258928571429, 50.263392857142854], [84.94001116071429, 53.618815104166664], [84.94001116071429, 54.270089285714285], [83.79743303571429, 54.839285714285715], [82.65485491071429, 57.122994559151785], [82.65485491071429, 57.517857142857146], [81.51227678571429, 59.794642857142854], [81.51227678571429, 60.933035714285715], [81.51227678571429, 62.07142857142857], [80.36969866071429, 63.232142857142854], [80.36969866071429, 66.045654296875], [79.22712053571429, 66.94627743675595], [79.22712053571429, 69.52678571428571], [77.70786830357143, 71.79241071428571], [76.56529017857143, 73.10906691778274], [76.56529017857143, 73.5], [76.56529017857143, 74.66071428571429], [76.56529017857143, 75.79910714285714], [76.56529017857143, 77.50126720610119], [76.56529017857143, 78.45535714285714], [75.42271205357143, 79.25526646205357], [73.70884486607143, 83.03125], [74.28013392857143, 85.302001953125], [72.56626674107143, 87.04910714285714], [73.13755580357143, 87.60714285714286], [73.13755580357143, 88.74553571428571], [73.13755580357143, 89.88392857142857], [71.99497767857143, 91.59151785714286], [71.99497767857143, 92.59449404761905], [70.85239955357143, 92.18303571428571], [70.85239955357143, 94.98906017485119], [70.85239955357143, 95.59821428571429], [69.70982142857143, 96.73660714285714], [69.70982142857143, 98.27678571428571], [69.70982142857143, 99.41517857142857], [68.56724330357143, 101.69196428571429], [67.42466517857143, 103.43303571428571], [67.42466517857143, 104.54171316964286], [65.52908179873512, 106.26785714285714], [65.13950892857143, 107.35693359375], [65.13950892857143, 108.56696428571429], [63.76614234561012, 109.935302734375], [62.85435267857143, 111.40099516369048], [62.85435267857143, 112.55133928571429], [61.71177455357143, 115.41964285714286], [61.51043410528274, 116.75863792782738], [59.99790736607143, 118.265625], [59.77716355096726, 119.21428571428571], [59.42661830357143, 122.25083705357143], [59.42661830357143, 122.65178571428571], [59.42661830357143, 124.11445545014881], [59.42661830357143, 127.15548270089286], [57.807030087425595, 127.22767857142857], [56.710123697916664, 128.40801711309524], [56.752232142857146, 130.31310453869048], [56.752232142857146, 132.38392857142858], [56.752232142857146, 132.94196428571428], [55.609654017857146, 133.55977957589286], [55.609654017857146, 135.0835425967262], [55.609654017857146, 137.50724283854166], [54.822591145833336, 137.51785714285714], [54.467075892857146, 137.51785714285714], [54.467075892857146, 139.03571428571428], [54.467075892857146, 140.17410714285714], [53.324497767857146, 142.00826590401786], [53.324497767857146, 144.19196428571428], [53.324497767857146, 144.75], [52.181919642857146, 145.88839285714286], [51.039341517857146, 147.02678571428572], [51.039341517857146, 148.16517857142858], [51.039341517857146, 149.32589285714286], [49.896763392857146, 150.46428571428572], [49.896763392857146, 152.12799944196428], [49.896763392857146, 152.74107142857142], [49.896763392857146, 153.87946428571428], [48.182896205357146, 155.04017857142858], [48.754185267857146, 156.17857142857142], [47.611607142857146, 156.90283203125], [47.611607142857146, 157.31696428571428], [47.611607142857146, 158.83482142857142], [46.469029017857146, 158.83482142857142], [46.469029017857146, 159.97321428571428], [46.469029017857146, 161.13392857142858], [45.326450892857146, 162.08443777901786], [45.326450892857146, 162.27232142857142], [45.326450892857146, 163.41071428571428], [45.326450892857146, 164.54910714285714], [44.183872767857146, 166.84821428571428], [44.183872767857146, 167.98660714285714], [44.183872767857146, 169.69419642857142], [44.183872767857146, 170.26339285714286], [44.183872767857146, 171.40178571428572], [44.183872767857146, 172.5625], [44.183872767857146, 173.70089285714286], [44.183872767857146, 174.83928571428572], [44.183872767857146, 175.97767857142858], [44.183872767857146, 177.11607142857142], [45.326450892857146, 178.27678571428572], [46.469029017857146, 178.27678571428572], [48.109000069754465, 179.79464285714286], [48.754185267857146, 180.6537853422619], [48.754185267857146, 181.45679873511904], [49.896763392857146, 180.93303571428572], [52.677972702752974, 180.93303571428572], [54.467075892857146, 180.93303571428572], [55.609654017857146, 180.93303571428572], [57.323521205357146, 180.93303571428572], [60.233346121651785, 180.93303571428572], [61.948922293526785, 180.93303571428572], [63.14793178013393, 180.93303571428572], [63.99693080357143, 180.93303571428572], [65.75582449776786, 180.31898716517858], [66.28208705357143, 179.79464285714286], [68.49898274739583, 177.11607142857142], [68.56724330357143, 175.33210100446428], [69.25798107328869, 174.15108816964286], [69.70982142857143, 171.13981119791666], [69.70982142857143, 170.05789620535714], [69.70982142857143, 168.02405366443452], [69.70982142857143, 167.4377906436012], [70.5145496186756, 165.6875], [70.85239955357143, 164.674560546875], [70.85239955357143, 163.76329985119048], [70.85239955357143, 163.41071428571428], [70.85239955357143, 162.27232142857142], [71.99497767857143, 157.87935965401786], [71.99497767857143, 155.17488606770834], [71.99497767857143, 154.47908528645834], [73.13755580357143, 151.5851585751488], [73.13755580357143, 150.42228190104166], [74.28013392857143, 149.19481259300596], [74.28013392857143, 148.16517857142858], [74.28013392857143, 145.88839285714286], [75.42271205357143, 144.75], [75.42271205357143, 143.61160714285714], [75.42271205357143, 142.45089285714286], [77.30122302827381, 140.17410714285714], [77.70786830357143, 138.79916527157738], [77.70786830357143, 136.75892857142858], [79.22712053571429, 136.50751023065476], [80.94098772321429, 136.35714285714286], [80.36969866071429, 134.15304129464286], [81.21761648995536, 134.08035714285714], [81.51227678571429, 132.37276785714286], [81.84659830729167, 131.80357142857142], [83.22614397321429, 131.80357142857142], [82.65485491071429, 130.64285714285714], [83.79743303571429, 129.76361374627976], [83.79743303571429, 128.4230492001488], [83.79743303571429, 128.36607142857142], [83.79743303571429, 127.22767857142857], [84.28658621651786, 126.08928571428571], [84.94001116071429, 124.92857142857143], [85.56290690104167, 123.79017857142857], [86.08258928571429, 122.1513671875], [86.08258928571429, 119.82857840401786], [87.79645647321429, 119.21428571428571], [87.22516741071429, 117.69642857142857], [87.22516741071429, 116.55803571428571], [87.22516741071429, 115.41964285714286], [87.22516741071429, 114.28125], [88.36774553571429, 113.12053571428571], [88.36774553571429, 111.80650111607143], [88.36774553571429, 110.27455357142857], [89.51032366071429, 109.09218052455357], [89.51032366071429, 107.99776785714286], [89.51032366071429, 107.40625], [90.65290178571429, 106.14833286830357], [90.65290178571429, 104.1767810639881], [92.36676897321429, 103.99107142857143], [91.79547991071429, 102.32846214657738], [91.79547991071429, 101.69196428571429], [91.79547991071429, 99.4926525297619], [92.93805803571429, 98.18889508928571], [92.93805803571429, 96.01173037574405], [92.93805803571429, 95.59821428571429], [92.93805803571429, 92.90165783110119], [92.93805803571429, 90.51986839657738], [93.56559826078869, 89.25868443080357], [94.08063616071429, 87.03794642857143], [94.08063616071429, 85.14177594866071], [95.28863234747024, 85.30803571428571], [95.22321428571429, 82.69902111235119], [96.36579241071429, 81.89285714285714], [97.50837053571429, 80.18526785714286], [97.50837053571429, 79.14839099702381], [97.50837053571429, 78.45535714285714], [99.28758603050595, 76.9375], [100.75404575892857, 75.79910714285714], [101.32533482142857, 75.79910714285714], [101.32533482142857, 74.0727771577381], [101.32533482142857, 72.93593052455357], [102.46791294642857, 73.5], [103.02633231026786, 72.36160714285714], [103.61049107142857, 70.78538876488095], [103.61049107142857, 70.08482142857143], [104.75306919642857, 70.01252092633929], [104.75306919642857, 68.52601841517857], [104.75306919642857, 67.78571428571429], [104.75306919642857, 65.93497721354167], [104.75306919642857, 64.95147414434524], [105.89564732142857, 64.94258045014881], [105.89564732142857, 63.801339285714285], [106.4811779203869, 62.07142857142857], [107.60951450892857, 62.07142857142857], [107.03822544642857, 60.090977260044646], [107.03822544642857, 58.70429920014881], [107.03822544642857, 57.91497512090774], [108.18080357142857, 56.56230236235119], [108.18080357142857, 55.97767857142857], [108.18080357142857, 54.10008021763393], [109.32338169642857, 53.148518880208336], [109.32338169642857, 52.5625], [109.32338169642857, 51.424107142857146], [109.32338169642857, 50.263392857142854], [110.46595982142857, 48.79208519345238], [110.46595982142857, 47.417410714285715], [110.46595982142857, 46.848214285714285], [110.46595982142857, 44.549107142857146], [111.60853794642857, 43.410714285714285], [111.60853794642857, 41.818702334449405], [111.60853794642857, 41.13392857142857], [111.60853794642857, 39.995535714285715], [111.60853794642857, 38.83482142857143], [112.75111607142857, 37.69642857142857], [112.75111607142857, 36.17857142857143], [112.75111607142857, 35.04017857142857], [112.75111607142857, 33.901785714285715], [114.46498325892857, 32.74107142857143], [113.89369419642857, 31.602678571428573], [113.89369419642857, 30.464285714285715], [113.89369419642857, 29.325892857142858], [115.03627232142857, 29.325892857142858], [115.03627232142857, 28.1875], [115.03627232142857, 27.026785714285715], [115.03627232142857, 24.75], [115.03627232142857, 23.611607142857142], [115.03627232142857, 22.473214285714285], [113.89369419642857, 22.473214285714285], [112.75111607142857, 22.473214285714285], [111.60853794642857, 22.473214285714285], [110.3154064360119, 22.473214285714285], [109.32338169642857, 22.473214285714285], [107.88296363467262, 22.473214285714285], [107.03822544642857, 22.473214285714285], [105.89564732142857, 22.473214285714285], [104.75306919642857, 22.473214285714285], [103.61049107142857, 22.473214285714285], [102.46791294642857, 22.473214285714285], [101.32533482142857, 22.473214285714285], [100.18275669642857, 22.473214285714285], [99.04017857142857, 22.473214285714285], [99.04017857142857, 23.611607142857142], [97.50837053571429, 23.611607142857142], [96.36579241071429, 24.75], [96.36579241071429, 25.888392857142858], [95.22321428571429, 25.888392857142858]];
    let result = true;
    canvasRef.current.toPoints()[0].forEach(item => {
        if(!pointInPolygon(item, testPolygon)){
            result = false
            return
        }  
});
console.log('====================================');
console.log(result);
console.log('====================================');
   
  };
  useEffect(() => {
    LogBox.ignoreAllLogs();
  }, []);
  return (
    <SafeAreaView style={styles.container}>
      <View style={{position: 'relative', width: '100%', height: 200}}>
        <Letter />
        <SketchCanvas
          ref={canvasRef}
          strokeColor={'black'}
          strokeWidth={6}
          containerStyle={{
            width: '100%',
            height: '100%',
            borderColor: 'red',
            borderWidth: 2,
          }}
        />
      </View>
      <Text style={{color: 'green', backgroundColor: 'white'}}>{Imagurl}</Text>
      <Button onPress={CaptureHandler} title="Capture" />
      <Button onPress={CheckHandler} title="Check" />
      <Button onPress={ResetHandler} title="Reset" />
      <Button onPress={UndoHandler} title="Undo" />
      <Button onPress={RedoHandler} title="Redo" />
      <Button onPress={ValidateHandler} title="Validate" />
      <Text
        style={{
          backgroundColor: '#fff',
          color: 'red',
          fontSize: 32,
          textAlign: 'center',
        }}>
        OUTPUT:{OutputText}
      </Text>
      <Svg
        ref={svgRef}
        width="200"
        height="200"
        viewBox="0 0 200 200"
        xmlns="http://www.w3.org/2000/svg">
        <Rect x="0" y="0" width="200" height="200" fill="#fff" />
        <Svimg x="0" y="0" width="200" height="200" href={Base64} />
      </Svg>

      <Image
        source={{uri: Imagurl}}
        resizeMode="contain"
        style={{width: 100, height: 100}}
      />
    </SafeAreaView>
  );
};

export default App;

const styles = StyleSheet.create({container: {flex: 1}});
